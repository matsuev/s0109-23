// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package userdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const userByID = `-- name: UserByID :one
SELECT "id", "username", "given_name", "family_name"
FROM "public"."user"
WHERE "id"=$1
`

type UserByIDRow struct {
	ID         pgtype.UUID
	Username   string
	GivenName  string
	FamilyName string
}

func (q *Queries) UserByID(ctx context.Context, id pgtype.UUID) (UserByIDRow, error) {
	row := q.db.QueryRow(ctx, userByID, id)
	var i UserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.GivenName,
		&i.FamilyName,
	)
	return i, err
}

const userCreate = `-- name: UserCreate :exec
INSERT INTO "public"."user"
("id", "username", "given_name", "family_name")
VALUES ($1, $2, $3, $4)
`

type UserCreateParams struct {
	ID         pgtype.UUID
	Username   string
	GivenName  string
	FamilyName string
}

func (q *Queries) UserCreate(ctx context.Context, arg UserCreateParams) error {
	_, err := q.db.Exec(ctx, userCreate,
		arg.ID,
		arg.Username,
		arg.GivenName,
		arg.FamilyName,
	)
	return err
}
