// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chat.sql

package userdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const userListByChatChannel = `-- name: UserListByChatChannel :many
SELECT "user"."id", "user"."username", "user"."given_name", "user"."family_name"
FROM "public"."user"
JOIN "public"."user_chat" ON "user_chat"."user_id" = "user"."id"
JOIN "public"."chat" ON "chat"."id" = "user_chat"."chat_id"
WHERE "chat"."channel"=$1
`

type UserListByChatChannelRow struct {
	ID         pgtype.UUID
	Username   string
	GivenName  string
	FamilyName string
}

func (q *Queries) UserListByChatChannel(ctx context.Context, channel string) ([]UserListByChatChannelRow, error) {
	rows, err := q.db.Query(ctx, userListByChatChannel, channel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserListByChatChannelRow
	for rows.Next() {
		var i UserListByChatChannelRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.GivenName,
			&i.FamilyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userListByChatID = `-- name: UserListByChatID :many
SELECT "user"."id", "user"."username", "user"."given_name", "user"."family_name"
FROM "public"."user"
JOIN "public"."user_chat" ON "user_chat"."user_id" = "user"."id"
WHERE "user_chat"."chat_id"=$1
`

type UserListByChatIDRow struct {
	ID         pgtype.UUID
	Username   string
	GivenName  string
	FamilyName string
}

func (q *Queries) UserListByChatID(ctx context.Context, chatID int64) ([]UserListByChatIDRow, error) {
	rows, err := q.db.Query(ctx, userListByChatID, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserListByChatIDRow
	for rows.Next() {
		var i UserListByChatIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.GivenName,
			&i.FamilyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
