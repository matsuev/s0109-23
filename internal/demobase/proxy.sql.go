// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: proxy.sql

package userdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const userCanPublish = `-- name: UserCanPublish :one
SELECT "can_publish" FROM "public"."user_chat"
JOIN "public"."chat" ON "chat"."id" = "user_chat"."chat_id"
WHERE "user_chat"."user_id"=$1 AND "chat"."channel"=$2
`

type UserCanPublishParams struct {
	UserID  pgtype.UUID
	Channel string
}

func (q *Queries) UserCanPublish(ctx context.Context, arg UserCanPublishParams) (bool, error) {
	row := q.db.QueryRow(ctx, userCanPublish, arg.UserID, arg.Channel)
	var can_publish bool
	err := row.Scan(&can_publish)
	return can_publish, err
}

const userCanSubscribe = `-- name: UserCanSubscribe :one
SELECT "id" FROM "public"."user_chat"
JOIN "public"."chat" ON "chat"."id" = "user_chat"."chat_id"
WHERE "user_chat"."user_id"=$1 AND "chat"."channel"=$2
`

type UserCanSubscribeParams struct {
	UserID  pgtype.UUID
	Channel string
}

func (q *Queries) UserCanSubscribe(ctx context.Context, arg UserCanSubscribeParams) (int64, error) {
	row := q.db.QueryRow(ctx, userCanSubscribe, arg.UserID, arg.Channel)
	var id int64
	err := row.Scan(&id)
	return id, err
}
